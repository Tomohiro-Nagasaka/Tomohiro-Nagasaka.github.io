{"version":3,"sources":["webpack:///./src/templates/tag.js","webpack:///./node_modules/core-js/modules/es6.function.name.js"],"names":["__webpack_require__","r","__webpack_exports__","d","pageQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby__WEBPACK_IMPORTED_MODULE_2__","_components_layout__WEBPACK_IMPORTED_MODULE_5__","_components_seo__WEBPACK_IMPORTED_MODULE_6__","_components_sidebar_Sidebar__WEBPACK_IMPORTED_MODULE_7__","_components_tags_TechTag__WEBPACK_IMPORTED_MODULE_8__","Tag","_ref","pageContext","data","posts","allMarkdownRemark","edges","labels","site","siteMetadata","tag","totalCount","tagHeader","a","createElement","title","keywords","seokeywords","className","map","post","tags","node","frontmatter","excerpt","key","id","to","fields","slug","date","techTags","forEach","i","push","getTechTags0","getTechTags","propTypes","PropTypes","shape","string","isRequired","number","arrayOf","dP","f","FProto","Function","prototype","nameRE","configurable","get","this","match","e"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,8BAAAE,IAAA,IAAAC,EAAAL,EAAA,GAAAM,EAAAN,EAAAO,EAAAF,GAAAG,EAAAR,EAAA,GAAAS,EAAAT,EAAAO,EAAAC,GAAAE,EAAAV,EAAA,KAAAW,GAAAX,EAAA,KAAAA,EAAA,KAAAA,EAAA,MAAAY,EAAAZ,EAAA,KAAAa,EAAAb,EAAA,KAAAc,EAAAd,EAAA,KAWMe,EAAM,SAAAC,GAA2B,IAAxBC,EAAwBD,EAAxBC,YAAaC,EAAWF,EAAXE,KAClBC,EAAQD,EAAKE,kBAAkBC,MAC/BC,EAASJ,EAAKK,KAAKC,aAAaF,OAE9BG,EAAQR,EAARQ,IACAC,EAAeR,EAAKE,kBAApBM,WACFC,EAAeD,EAAN,SACI,IAAfA,EAAmB,GAAK,KADb,iBAEMD,EAFN,IAYf,OACInB,EAAAsB,EAAAC,cAAClB,EAAA,EAAD,KACIL,EAAAsB,EAAAC,cAACjB,EAAA,EAAD,CAAKkB,MAAM,OAAOC,SAAUb,EAAKK,KAAKC,aAAaQ,cACnD1B,EAAAsB,EAAAC,cAAA,OAAKI,UAAU,cACX3B,EAAAsB,EAAAC,cAAA,OAAKI,UAAU,qBACX3B,EAAAsB,EAAAC,cAAChB,EAAA,EAAD,OAEJP,EAAAsB,EAAAC,cAAA,OAAKI,UAAU,kBACX3B,EAAAsB,EAAAC,cAAA,SAAGvB,EAAAsB,EAAAC,cAAA,MAAII,UAAU,WAAWN,IAC3BR,EAAMe,IAAI,SAACC,GACR,IAAMC,EAAOD,EAAKE,KAAKC,YAAYF,KACnC,MAAmC,KAAhCD,EAAKE,KAAKC,YAAYR,OAAsC,KAAtBK,EAAKE,KAAKE,aAG/C,EAIIjC,EAAAsB,EAAAC,cAAA,OAAKW,IAAKL,EAAKE,KAAKI,GAAIR,UAAU,kBAC9B3B,EAAAsB,EAAAC,cAACnB,EAAA,EAAD,CACIgC,GAAIP,EAAKE,KAAKM,OAAOC,KACrBX,UAAU,aAEV3B,EAAAsB,EAAAC,cAAA,MAAII,UAAU,WAAWE,EAAKE,KAAKC,YAAYR,QAEnDxB,EAAAsB,EAAAC,cAAA,SAAOI,UAAU,qBAAjB,aAAgDE,EAAKE,KAAKC,YAAYO,MAEtEvC,EAAAsB,EAAAC,cAAA,KAAGI,UAAU,iBAAiBE,EAAKE,KAAKE,SACxCjC,EAAAsB,EAAAC,cAACnB,EAAA,EAAD,CACIgC,GAAIP,EAAKE,KAAKM,OAAOC,KACrBX,UAAU,gBAEV3B,EAAAsB,EAAAC,cAAA,SAAOI,UAAU,uBAAjB,oBAEJ3B,EAAAsB,EAAAC,cAAA,OAAKI,UAAU,WA1CvB,SAACG,GACjB,IAAMU,EAAW,GAIjB,OAHAV,EAAKW,QAAQ,SAACtB,EAAKuB,GACfF,EAASG,KAAKC,YAAazB,EAAKH,EAAQ0B,MAErCF,EAsCsBK,CAAYf,WAYrDrB,EAAIqC,UAAY,CACZnC,YAAaoC,IAAUC,MAAM,CACzB7B,IAAK4B,IAAUE,OAAOC,aAE1BtC,KAAMmC,IAAUC,MAAM,CAClBlC,kBAAmBiC,IAAUC,MAAM,CAC/B5B,WAAY2B,IAAUI,OAAOD,WAC7BnC,MAAOgC,IAAUK,QACbL,IAAUC,MAAM,CACZjB,KAAMgB,IAAUC,MAAM,CAClBhB,YAAae,IAAUC,MAAM,CACzBxB,MAAOuB,IAAUE,OAAOC,iBAGjCA,iBAOZ,IAAMpD,EAAS,YAyCPW,iCC1If,IAAA4C,EAAS3D,EAAQ,IAAc4D,EAC/BC,EAAAC,SAAAC,UACAC,EAAA,wBACA,SAGAH,GAAkB7D,EAAQ,KAAgB2D,EAAAE,EAH1C,OAG0C,CAC1CI,cAAA,EACAC,IAAA,WACA,IACA,UAAAC,MAAAC,MAAAJ,GAAA,GACK,MAAAK,GACL","file":"component---src-templates-tag-js-5d38fe1cd7df2ef8ccbc.js","sourcesContent":["import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { Link, graphql } from \"gatsby\"\r\nimport \"bootstrap/dist/css/bootstrap.css\"\r\nimport \"../pages/index.css\"\r\n\r\nimport Layout from \"../components/layout\"\r\nimport SEO from \"../components/seo\"\r\nimport Sidebar from \"../components/sidebar/Sidebar\"\r\nimport {getTechTags0} from \"../components/tags/TechTag\"\r\n\r\nconst Tag = ({ pageContext, data }) => {\r\n    const posts = data.allMarkdownRemark.edges\r\n    const labels = data.site.siteMetadata.labels\r\n    //console.log(pageContext.tag)\r\n    const { tag } = pageContext\r\n    const { totalCount } = data.allMarkdownRemark\r\n    const tagHeader = `${totalCount} post${\r\n        totalCount === 1 ? \"\" : \"s\"\r\n        } tagged with \"${tag}\"`\r\n\r\n        const getTechTags = (tags) => {\r\n            const techTags = []\r\n            tags.forEach((tag, i) => {\r\n                techTags.push(getTechTags0(tag, labels, i))\r\n            })\r\n            return techTags\r\n        }\r\n\r\n    return (\r\n        <Layout>\r\n            <SEO title=\"Home\" keywords={data.site.siteMetadata.seokeywords} />\r\n            <div className=\"index-main\">\r\n                <div className=\"sidebar px-4 py-2\">\r\n                    <Sidebar />\r\n                </div>\r\n                <div className=\"post-list-main\">\r\n                    <i><h2 className=\"heading\">{tagHeader}</h2></i>\r\n                    {posts.map((post) => {\r\n                        const tags = post.node.frontmatter.tags\r\n                        if(post.node.frontmatter.title === \"\" || post.node.excerpt === \"\")\r\n                        {\r\n                            //TODO Should be filtered by graphQL\r\n                            return\r\n                        }\r\n                        else {\r\n                            return (\r\n                                <div key={post.node.id} className=\"container mt-5\">\r\n                                    <Link\r\n                                        to={post.node.fields.slug}\r\n                                        className=\"text-dark\"\r\n                                    >\r\n                                        <h2 className=\"heading\">{post.node.frontmatter.title}</h2>\r\n                                    </Link>\r\n                                    <small className=\"d-block text-info\">Posted on {post.node.frontmatter.date}\r\n                                    </small>\r\n                                    <p className=\"mt-3 d-inline\">{post.node.excerpt}</p>\r\n                                    <Link\r\n                                        to={post.node.fields.slug}\r\n                                        className=\"text-primary\"\r\n                                    >\r\n                                        <small className=\"d-inline-block ml-3\"> Read full post</small>\r\n                                    </Link>\r\n                                    <div className=\"d-block\">\r\n                                        {getTechTags(tags)}\r\n                                    </div>\r\n                                </div>\r\n                            )\r\n                        }\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </Layout>\r\n    )\r\n}\r\n\r\nTag.propTypes = {\r\n    pageContext: PropTypes.shape({\r\n        tag: PropTypes.string.isRequired,\r\n    }),\r\n    data: PropTypes.shape({\r\n        allMarkdownRemark: PropTypes.shape({\r\n            totalCount: PropTypes.number.isRequired,\r\n            edges: PropTypes.arrayOf(\r\n                PropTypes.shape({\r\n                    node: PropTypes.shape({\r\n                        frontmatter: PropTypes.shape({\r\n                            title: PropTypes.string.isRequired,\r\n                        }),\r\n                    }),\r\n                }).isRequired\r\n            ),\r\n        }),\r\n    }),\r\n}\r\n\r\n//, published: { eq: true } \r\nexport const pageQuery = graphql`\r\n  query($tag: String) {\r\n    site {\r\n        siteMetadata {\r\n            title \r\n            author\r\n            labels {\r\n                tag\r\n                tech \r\n                name \r\n                size \r\n                color\r\n            } \r\n        }\r\n    } \r\n    allMarkdownRemark(\r\n      limit: 2000\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n      filter: { frontmatter: { tags: { in: [$tag] } }}\r\n    ) {\r\n      totalCount\r\n      edges {\r\n         node {\r\n            excerpt(pruneLength: 200)\r\n            html\r\n            id\r\n            frontmatter {\r\n                title\r\n                date(formatString: \"MMMM, YYYY\")\r\n                tags\r\n                published\r\n            }\r\n             fields {\r\n                slug\r\n            }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport default Tag","var dP = require('./_object-dp').f;\nvar FProto = Function.prototype;\nvar nameRE = /^\\s*function ([^ (]*)/;\nvar NAME = 'name';\n\n// 19.2.4.2 name\nNAME in FProto || require('./_descriptors') && dP(FProto, NAME, {\n  configurable: true,\n  get: function () {\n    try {\n      return ('' + this).match(nameRE)[1];\n    } catch (e) {\n      return '';\n    }\n  }\n});\n"],"sourceRoot":""}